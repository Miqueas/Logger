#[
  Author: Miqueas Martinez (https://github.com/Miqueas)
  Co-Author: Nelson "darltrash" LÃ³pez (https://github.com/darltrash)
  Date: 2020/09/12
  License: zlib (see it in the repository)
  Git Repository: https://github.com/Miqueas/Logit
]#

import std/times
import std/strformat
from std/os import dirExists, getTempDir, getAppFilename, `/`
from std/strutils import join, format

type
  LogLevel* = enum
    OTHER,
    TRACE,
    DEBUG,
    INFO,
    WARN,
    ERROR,
    FATAL
  Logit* = object
    path: string
    namespace*: string
    filePrefix*: TimeFormat
    defaultLevel*: LogLevel
    enableConsole*: bool

proc e(n: varargs[int]): string = return '\e' & '[' & join(n, ";") & 'm'

const
  FMT = (
    Filename: "$1_$2.log",
    Time: "HH:mm:ss",
    Out: (
      File: "$1 [$2 $3] $4@$5: $6\n",
      Console: e(2) & "$1 [" & e(0,1) & "$2 $3$4" & e(0,2) & "] $5@$6:" & e(0) & " $7"
    ),
    Header: (
      File: "\n$1 [$2]\n\n",
      Console: '\n' & e(2) & "$1 [" & e(0, 1) & "$2" & e(0, 2) & "]" & e(0) & '\n'
    ),
    Quit: (
      File: "$1 [QUIT]: $2\n",
      Console: e(2) & "$1 [" & e(0, 1, 31) & "QUIT" & e(0, 2) & "]: " & e(0) & "$2\n"
    )
  )

  ASSOC = [
    ( name: "OTHER", color: 30 ),
    ( name: "TRACE", color: 32 ),
    ( name: "DEBUG", color: 36 ),
    ( name: "INFO.", color: 34 ),
    ( name: "WARN.", color: 33 ),
    ( name: "ERROR", color: 31 ),
    ( name: "FATAL", color: 35 )
  ]

# Logit constructor
proc newLogit*(path = getTempDir(),
               name = "Logit",
               level = OTHER,
               console = false,
               prefix = initTimeFormat("YYYY-MM-dd")
              ): Logit =
  var l = Logit(
    path: path,
    namespace: name,
    filePrefix: prefix,
    defaultLevel: level,
    enableConsole: console
  )

  let
    date = now().format(l.filePrefix)
    time = now().format(FMT.Time)
    file = open(l.path / format(FMT.Filename, date, l.namespace), fmAppend)

  file.write(format(FMT.Header.File, time, "GENERATED BY LOGIT, DO NOT EDIT"))
  file.close()

  if l.enableConsole:
    let cout = FMT.Header.Console.format(time, "LOGGING LIBRARY STARTED")
    echo cout

  return l

# Logging API
template `()`*(l: Logit, msg: string, quitMsg = "") =
  l.log(l.defaultLevel, msg, quitMsg)

template `()`*(l: Logit, level: LogLevel, msg: string, quitMsg = "") =
  l.log(level, msg, quitMsg)

template log*(l: Logit, msg: string, quitMsg = "") =
  l.log(l.defaultLevel, msg, quitMsg)

template log*(l: Logit, level: LogLevel, msg: string, quitMsg = "") =
  let
    dt = now()
    exitMsg =
      if quitMsg == "": msg
      else: quitMsg
    info = instantiationInfo(0)
    date = dt.format(l.filePrefix)
    time = dt.format(FMT.Time)
    file = open(l.path / format(FMT.Filename, date, l.namespace), fmAppend)
    fout = FMT.Out.File.format(time, l.namespace, ASSOC[ord(level)].name, info.filename, info.line, msg)

  file.write(fout)

  if l.enableConsole:
    let cout = FMT.Out.Console.format(time, l.namespace, e(ASSOC[ord(level)].color), ASSOC[ord(level)].name, info.filename, info.line, msg)
    echo cout

  if ord(level) > 4:
    file.write(FMT.Quit.File.format(time, exitMsg))
    file.close()

    if l.enableConsole: quit(FMT.Quit.Console.format(time, exitMsg), 1)
    else: quit(1)
  else: file.close()

template expect*(l: Logit, exp: untyped, msg: string) =
  if not exp: l.log(LogLevel.ERROR, msg)

template header*(l: Logit, msg: string) =
  let
    dt = now()
    date = dt.format(l.filePrefix)
    time = dt.format(FMT.Time)
    file = open(l.path / format(FMT.Filename, date, l.namespace), fmAppend)
    fout = FMT.Header.File.format(time, msg)
  
  file.write(fout)
  file.close()

  if l.enableConsole:
    let cout = FMT.Header.Console.format(time, msg)
    echo cout

# Setters and Getters
proc path*(l: Logit): string {.inline.} =
  l.path

proc `path=`*(l: var Logit, newPath: string) {.inline.} =
  assert dirExists(newPath), fmt"`{newPath}` isn't a valid path or doesn't exists"
  l.path = newPath