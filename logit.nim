#[
  Author: Miqueas Martinez (https://github.com/Miqueas)
  Co-Author: Nelson "darltrash" LÃ³pez (https://github.com/darltrash)
  Date: 2020/09/12
  License: zlib (see it in the repository)
  Git Repository: https://github.com/Miqueas/Logit
]#

import std/times
import std/strformat
from std/os import dirExists, getTempDir, getAppFilename, `/`
from std/strutils import join, format

type
  LogLevel* = enum
    OTHER,
    TRACE,
    INFO,
    DEBUG,
    WARN,
    ERROR,
    FATAL
  Logit* = object
    path: string
    namespace*: string
    filePrefix*: TimeFormat
    defaultLevel*: LogLevel
    enableConsole*: bool

proc e(n: varargs[int]): string = return '\e' & '[' & join(n, ";") & 'm'

const
  FMT = (
    Filename: "$1_$2.log",
    Time: "HH:mm:ss",
    Out: (
      File: "$1 [$2 $3] $4@$5: $6\n",
      Console: e(2) & "$1 [" & e(0,1) & "$2 $3$4" & e(0,2) & "] $5@$6:" & e(0) & " $7"
    ),
    Header: (
      File: "\n$1 [$2]\n\n",
      Console: '\n' & e(2) & "$1 [" & e(0, 1) & "$2" & e(0, 2) & "]" & e(0) & '\n'
    ),
    Quit: (
      File: "$1 [QUIT]: $2\n",
      Console: e(2) & "$1 [" & e(0, 1, 31) & "QUIT" & e(0, 2) & "]: " & e(0) & "$2\n"
    )
  )

  ASSOC = [
    ( name: "OTHER", color: 30 ),
    ( name: "TRACE", color: 32 ),
    ( name: "DEBUG", color: 36 ),
    ( name: "INFO.", color: 34 ),
    ( name: "WARN.", color: 33 ),
    ( name: "ERROR", color: 31 ),
    ( name: "FATAL", color: 35 )
  ]

# Logit constructor
proc newLogit*(path = getTempDir(),
               name = "Logit",
               level = OTHER,
               console = false,
               prefix = initTimeFormat("YYYY-MM-dd")
              ): Logit =
  var self = Logit(
    path: path,
    namespace: name,
    filePrefix: prefix,
    defaultLevel: level,
    enableConsole: console
  )

  let
    dt = now()
    date = dt.format(self.filePrefix)
    time = dt.format(FMT.Time)
    file = open(self.path / FMT.Filename.format(date, self.namespace), fmAppend)

  file.write(FMT.Header.File.format(time, "GENERATED BY LOGIT, DO NOT EDIT"))
  file.close()

  if self.enableConsole: echo FMT.Header.Console.format(time, "LOGGING LIBRARY STARTED")

  return self

# Logging API
template `()`*(self: Logit, msg = "", quitMsg = "") =
  self.log(self.defaultLevel, msg, quitMsg)

template `()`*(self: Logit, lvl: LogLevel, msg = "", quitMsg = "") =
  self.log(lvl, msg, quitMsg)

template log*(self: Logit, msg = "", quitMsg = "") =
  self.log(self.defaultLevel, msg, quitMsg)

template log*(self: Logit, lvl: LogLevel, logMsg = "", quitMsg = "") =
  let
    dt = now()
    msg =
      if logMsg == "": ASSOC[ord(lvl)].name
      else: logMsg
    exitMsg =
      if quitMsg == "": msg
      else: quitMsg
    info = instantiationInfo(0)
    date = dt.format(self.filePrefix)
    time = dt.format(FMT.Time)
    file = open(self.path / FMT.Filename.format(date, self.namespace), fmAppend)

  file.write(FMT.Out.File.format(
    time, self.namespace, ASSOC[ord(lvl)].name, info.filename, info.line, msg
  ))

  if self.enableConsole:
    echo FMT.Out.Console.format(
      time, self.namespace, e(ASSOC[ord(lvl)].color), ASSOC[ord(lvl)].name, info.filename, info.line, msg
    )

  if ord(lvl) > 4:
    file.write(FMT.Quit.File.format(time, exitMsg))
    file.close()

    if self.enableConsole: quit(FMT.Quit.Console.format(time, exitMsg), 1)
    else: quit(1)
  else: file.close()

template expect*(self: Logit, exp: untyped, msg = "", quitMsg = "") =
  if not exp: self.log(ERROR, msg, quitMsg)

template header*(self: Logit, msg = "") =
  let
    dt = now()
    date = dt.format(self.filePrefix)
    time = dt.format(FMT.Time)
    file = open(self.path / FMT.Filename.format(date, self.namespace), fmAppend)

  file.write(FMT.Header.File.format(time, msg))
  file.close()

  if self.enableConsole: echo FMT.Header.Console.format(time, msg)

# Setters and Getters
proc path*(self: Logit): string {.inline.} =
  return self.path

proc `path=`*(self: var Logit, newPath: string): void {.raises: [ValueError], inline.} =
  if not dirExists(newPath):
    raise newException(ValueError, fmt"`{newPath}` isn't a valid path or doesn't exists")
  self.path = newPath